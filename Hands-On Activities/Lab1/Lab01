import math

class Observation:
    def __init__(self, time: float, magnitude: float, error: float):
        self.time = time
        self.magnitude = magnitude
        self.error = error

class Star:
    def __init__(self, identifier: str, ra: float, dec: float, variability_class: str):
        self.identifier = identifier
        self.ra = ra  # Right Ascension
        self.dec = dec  # Declination
        self.variability_class = variability_class
        self.observations = []

    def add_observation(self, time: float, magnitude: float, error: float):
        observation = Observation(time, magnitude, error)
        self.observations.append(observation)

    def get_magnitude_average(self):
        if not self.observations:
            return None
        total_magnitude = sum(obs.magnitude for obs in self.observations)
        return total_magnitude / len(self.observations)

    def get_magnitude_variance(self):
        if not self.observations:
            return None
        avg = self.get_magnitude_average()
        variance = sum((obs.magnitude - avg) ** 2 for obs in self.observations) / len(self.observations)
        return variance

class Field:
    def __init__(self, name: str):
        self.name = name
        self.stars = []

    def add_star(self, star: Star):
        self.stars.append(star)

    def get_star_by_identifier(self, identifier: str):
        for star in self.stars:
            if star.identifier == identifier:
                return star
        return None

# Example of usage
# Creating some stars and adding them to a field
field = Field("Field A")

star1 = Star("Star 1", 123.45, 67.89, "RR Lyrae")
star1.add_observation(2450000.5, 12.5, 0.1)
star1.add_observation(2450001.5, 12.6, 0.1)
star1.add_observation(2450002.5, 12.4, 0.1)

star2 = Star("Star 2", 123.55, 67.95, "Eclipsing Binary")
star2.add_observation(2450000.5, 14.5, 0.2)
star2.add_observation(2450001.5, 14.3, 0.2)

# Adding stars to the field
field.add_star(star1)
field.add_star(star2)

# Calculate average and variance of magnitudes for star1
print(f"Average magnitude of {star1.identifier}: {star1.get_magnitude_average()}")
print(f"Variance of magnitudes of {star1.identifier}: {star1.get_magnitude_variance()}")
